#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/mman.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <errno.h>
#include <sys/wait.h>

#define BUFFER_SIZE 10
#define SHM_SIZE 1024
#define SHM_NAME "/shm_buffer"


typedef struct  {
int data[BUFFER_SIZE];
int head;
int tail;

}circular_buffer;


void consume_item(circular_buffer* buf) {
// Consume an item from the buffer

int item = buf->data[buf->head];


printf("Consumed item %d in index : %d\n",item,buf->head);
buf->head=buf->head+1;

}

void consumer(circular_buffer* buf) {
while (1) {
if (buf->head !=BUFFER_SIZE) {
consume_item(buf);
}

else {

printf("Buffer is Empty \n ");
return;


}


}
}


int main() {

// Create or open the shared memory segment
int shm_fd = shm_open(SHM_NAME, O_RDWR, 0666);

if (shm_fd == -1) {
    perror("shm_open");
    exit(1);
}



circular_buffer* buf=(circular_buffer*) mmap(0, SHM_SIZE, PROT_READ |PROT_WRITE , MAP_SHARED, shm_fd, 0);

if (buf == MAP_FAILED) {
    perror("mmap");
    exit(1);
};

// signal(SIGINT, handle_sigint);

// Initialize the buffer


consumer(buf);
buf->head=0;
buf->tail=0;
 

return 0;
}