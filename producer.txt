#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/mman.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <errno.h>
#include <sys/wait.h>

#define SHM_NAME "/shm_buffer"

#define SHM_SIZE 1024
#define BUFFER_SIZE 10
pid_t pid;
typedef struct {
int buffer[BUFFER_SIZE];
int head;
int tail;
} circular_buffer;

 

int produce_item(circular_buffer* buf) {
// Generate a random integer or produce an item
buf->buffer[buf->tail]= rand() % 100;
return buf->buffer[buf->tail];
}


void producer(circular_buffer* buffer, int value) {
while(1){

// Check if the buffer is full
if (buffer->tail ==BUFFER_SIZE) {
printf("Buffer is full. Cannot produce more items.\n");

return;
}
else{

// Produce the item and add it to the buffer
int value= produce_item(buffer);
printf("Produced item: %d in index: %d\n", value, buffer->tail);
buffer->tail++;
}
}
}

int main() {
int shm_fd;
circular_buffer* buff;



// Create or open the shared memory segment
shm_fd = shm_open(SHM_NAME,  O_CREAT|O_RDWR , 0666);
if(shm_fd==-1){
printf("The shared memory segment creation or opening operation has failed!!\n");
exit(0);
}

// Set the size of the shared memory segment
int f = ftruncate(shm_fd, SHM_SIZE);
if(f==-1){
printf("The size of shared memory has not been modified\n");
exit(0);
}

// Map the shared memory segment to the process's virtual address space
buff = (circular_buffer*) mmap(NULL, SHM_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, 0);
if (buff == MAP_FAILED) {
printf("mmap failed\n");
exit(0);
}

// Initialize the circular buffer
buff->head=0;
buff->tail = 0;

//fork a child
for(int i=0;i<200;i++){
pid = fork();
if (pid < 0) {
printf("Fork failed\n");
exit(0);
}

else if (pid == 0) {
// child process

execlp("./consumer", "consumer", NULL);
perror ("The child creation is failed\n");
} else {
// parent process
producer(buff,produce_item(buff));

wait(NULL);

}
usleep(rand()%2000000);
}
printf("h %d t %d\n",buff->head,buff->tail);


// Check if shared memory segment already exists and unlink it if necessary
if (shm_unlink(SHM_NAME) == -1 && errno != ENOENT) {
perror("shm_unlink");
exit(EXIT_FAILURE);
}


// Detach the shared memory segment
int m = munmap(buff, SHM_SIZE);
if(m==-1){
printf("munmap failed\n");
exit(0);
}

// Deallocate the shared memory segment
shm_unlink(SHM_NAME);

return 0;
}